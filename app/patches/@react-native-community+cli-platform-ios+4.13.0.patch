diff --git a/node_modules/@react-native-community/cli-platform-ios/build/commands/runIOS/index.js b/node_modules/@react-native-community/cli-platform-ios/build/commands/runIOS/index.js
index 6e16c4f..a55b497 100644
--- a/node_modules/@react-native-community/cli-platform-ios/build/commands/runIOS/index.js
+++ b/node_modules/@react-native-community/cli-platform-ios/build/commands/runIOS/index.js
@@ -49,6 +49,8 @@ var _findXcodeProject = _interopRequireDefault(require("./findXcodeProject"));
 
 var _parseIOSDevicesList = _interopRequireDefault(require("./parseIOSDevicesList"));
 
+var _parseXctraceIOSDevicesList = _interopRequireDefault(require("./parseXctraceIOSDevicesList"));
+
 var _findMatchingSimulator = _interopRequireDefault(require("./findMatchingSimulator"));
 
 var _warnAboutManuallyLinkedLibs = _interopRequireDefault(require("../../link/warnAboutManuallyLinkedLibs"));
@@ -75,6 +77,16 @@ function _ora() {
   return data;
 }
 
+function _execa() {
+	const data = _interopRequireDefault(require("execa"));
+
+	_execa = function () {
+		return data;
+	};
+
+	return data;
+}
+
 function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
 
 /**
@@ -113,9 +125,18 @@ function runIOS(_, ctx, args) {
     return _cliTools().logger.error('The `device` and `udid` options are mutually exclusive.');
   }
 
-  const devices = (0, _parseIOSDevicesList.default)(_child_process().default.execFileSync('xcrun', ['instruments', '-s'], {
-    encoding: 'utf8'
-  }));
+  let devices;
+
+  try {
+	const out = _execa().default.sync('xcrun', ['xctrace', 'list', 'devices']);
+
+	devices = (0, _parseXctraceIOSDevicesList.default)( // Xcode 12.5 introduced a change to output the list to stdout instead of stderr
+		out.stderr === '' ? out.stdout : out.stderr);
+  } catch (e) {
+	_cliTools().logger.warn('Support for Xcode 11 and older is deprecated. Please upgrade to Xcode 12.');
+
+	devices = (0, _parseIOSDevicesList.default)(_execa().default.sync('xcrun', ['instruments', '-s']).stdout);
+  }
 
   if (args.udid) {
     const device = devices.find(d => d.udid === args.udid);
@@ -486,4 +507,4 @@ var _default = {
 };
 exports.default = _default;
 
-//# sourceMappingURL=index.js.map
\ No newline at end of file
+//# sourceMappingURL=index.js.map
diff --git a/node_modules/@react-native-community/cli-platform-ios/build/commands/runIOS/parseXctraceIOSDevicesList.js b/node_modules/@react-native-community/cli-platform-ios/build/commands/runIOS/parseXctraceIOSDevicesList.js
new file mode 100644
index 0000000..0c45209
--- /dev/null
+++ b/node_modules/@react-native-community/cli-platform-ios/build/commands/runIOS/parseXctraceIOSDevicesList.js
@@ -0,0 +1,70 @@
+"use strict";
+
+Object.defineProperty(exports, "__esModule", {
+  value: true
+});
+exports.default = void 0;
+
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ */
+
+/**
+ * Parses the output of the `xcrun instruments -s` command and returns metadata
+ * about available iOS simulators and physical devices, as well as host Mac for
+ * Catalyst purposes.
+ *
+ * Expected text looks roughly like this:
+ *
+ * ```
+ * == Devices ==
+ * this-mac-device [UDID]
+ * A Physical Device (OS Version) (UDID)
+ *
+ * == Simulators ==
+ * A Simulator Device (OS Version) (UDID)
+ * ```
+ */
+function parseIOSDevicesList(text) {
+  const devices = [];
+  let isSimulator = false;
+
+  if (text.indexOf('== Simulators ==') === -1) {
+    return [];
+  }
+
+  text.split('\n').forEach(line => {
+    if (line === '== Simulators ==') {
+      isSimulator = true;
+    }
+
+    const device = line.match(/(.*?) (\(([0-9.]+)\) )?\(([0-9A-F-]+)\)/i);
+
+    if (device) {
+      const [, name,, version, udid] = device;
+      const metadata = {
+        name,
+        udid
+      };
+
+      if (version) {
+        metadata.version = version;
+        metadata.type = isSimulator ? 'simulator' : 'device';
+      } else {
+        metadata.type = 'catalyst';
+      }
+
+      devices.push(metadata);
+    }
+  });
+  return devices;
+}
+
+var _default = parseIOSDevicesList;
+exports.default = _default;
+
+//# sourceMappingURL=parseXctraceIOSDevicesList.js.map
\ No newline at end of file
